// lib/agent/GitManager.ts
import { McpAgent } from "@/lib/mcp-agent";
import { GitHubPRResult, StreamEvent } from "@/types";
import { createPullRequestFromRepo } from "../github/api";

export class GitManager {
  private agent: McpAgent;

  constructor(agent: McpAgent) {
    this.agent = agent;
  }

  public async *branch(branchName: string): AsyncGenerator<StreamEvent, void> {
    yield* this.agent.runTool('git_branch', { branchName, repoPath: undefined }, 'Created new branch.')
  }

  public async *commit(message: string): AsyncGenerator<StreamEvent, void> {
    yield* this.agent.runTool('git_add', { files: ['.'], repoPath: undefined }, 'Staged all changes.')
    yield* this.agent.runTool('git_commit', { message, repoPath: undefined }, 'Committed changes.')
  }

  public async *push(branchName: string): AsyncGenerator<StreamEvent, void> {
    yield* this.agent.runTool('git_push', { branchName, repoPath: undefined }, 'Pushed changes to remote.')
  }

  public async *createPR(branchName: string, prompt: string): AsyncGenerator<StreamEvent, GitHubPRResult> {
    yield { type: 'pr_create', message: 'Creating pull request...', timestamp: new Date().toISOString() }
    
    const { owner, repo } = this.agent.parseRepoUrl(this.agent.repoUrl)
    
    try {
      const prResult = await createPullRequestFromRepo(
        this.agent.repoUrl,
        `feat: ${prompt.slice(0, 50)}...`,
        `This PR was generated by Code Pilot based on the following prompt:\n\n> ${prompt}`,
        branchName,
        'main'
      )
      console.log('[AGENT] PR created successfully:', prResult.url)
      return prResult
    } catch (error: any) {
      console.error('[AGENT] Failed to create pull request:', error)
      throw new Error(`Failed to create pull request: ${error.message}`)
    }
  }
} 